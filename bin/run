#!/bin/bash

export BM_DIR=$PWD
export CPP_DIR=$BM_DIR/src/main/cpp

source $BM_DIR/test_parameters.txt

# install homebrew and wget
bash $BM_DIR/bin/initialize 2>&1 | tee $LOGS

# install eigen
if [ -z ${EIGEN+x} ]; then
  if [ ! -e "$BM_DIR/3.2.4.zip" ]; then
    wget http://bitbucket.org/eigen/eigen/get/3.2.4.zip

    unzip 3.2.4.zip -d eigen
  fi
  export EIGEN=$BM_DIR/eigen/eigen-eigen-10219c95fe65
fi

# install boost
if [ ! -e "/usr/local/include/boost" ]; then
  brew install boost
fi

# install mtl-4
if [ -z ${MTL4+x} ]; then
  if [ ! -e "$BM_DIR/MTL-4.0.9555-Linux.zip" ]; then
    wget http://www.simunova.com/downloads/mtl4/MTL-4.0.9555-Linux.zip
    unzip MTL-4.0.9555-Linux.zip -d mtl-4

  fi
  export MTL4=$BM_DIR/mtl-4/MTL-4.0.9555-Linux/usr/include
fi

# install Armadillo
if [ -z ${ARMA+x} ]; then
  if [ ! -e "$BM_DIR/armadillo-4.650.3.tar.gz" ]; then
    wget http://sourceforge.net/projects/arma/files/armadillo-4.650.3.tar.gz
    tar -xvf armadillo-4.650.3.tar.gz

    brew install cmake
    cd armadillo-4.650.3

    cmake .
    make
    make install DESTDIR=.

  fi
  export ARMA=$BM_DIR/armadillo-4.650.3/usr/include
fi

cd $BM_DIR

# Compile C++ libraries
rm $CPP_DIR/arma $CPP_DIR/eigen $CPP_DIR/ublas $CPP_DIR/mtl

g++ -Wall $CPP_DIR/arma.cpp -o $CPP_DIR/arma -O3 -I $ARMA -DARMA_DONT_USE_WRAPPER -framework Accelerate -lboost_program_options
g++ -Wall $CPP_DIR/eigen.cpp -o $CPP_DIR/eigen -O3 -msse2 -I $EIGEN -framework Accelerate -lboost_program_options
# g++ -Wall $CPP_DIR/ublas.cpp -o $CPP_DIR/ublas -O3 -framework Accelerate -lboost_program_options
# g++ -Wall $CPP_DIR/mtl.cpp -o $CPP_DIR/mtl -O2 -I $MTL4 -framework Accelerate -lboost_program_options

# Compile Scala code
$BM_DIR/build/sbt clean assembly 2>&1 | tee -a $LOGS
export MLLIB=$BM_DIR/target/scala-2.10/linalg-benchmarks-assembly-0.0.1.jar
export MLLIB_MAIN="brkyvz.linalg.Main"


echo "" > $RESULTS

runtests_c () {
  $CPP_DIR/arma "$@" | tee -a $RESULTS
  $CPP_DIR/eigen "$@" | tee -a $RESULTS
  # $CPP_DIR/ublas "$@" | tee -a $RESULTS
  # $CPP_DIR/mtl4 "$@" | tee -a $RESULTS
}

# vary L.
for L_VAL in "${L[@]}"; do
  echo -e "l: $L_VAL" >> $RESULTS
  runtests_c --trials $TRIALS --l $L_VAL --skip-simple true --skip-gemm true --skip-mult true
  java $JVM_OPTS -cp $MLLIB $MLLIB_MAIN --l $L_VAL --skip-simple --skip-gemm --skip-mult 2>> $LOGS | tee -a $RESULTS
done

# vary M.
for M_VAL in "${M[@]}"; do
  echo -e "m: $M_VAL\tn: $N_DEF\tk: $K_DEF" >> $RESULTS
  runtests_c --m $M_VAL --n $N_DEF --k $K_DEF --trials $TRIALS --a $A --b $B --c $C --d $D \
    --l $L_DEF --skip-vec true --skip-mult true
  java $JVM_OPTS -cp $MLLIB $MLLIB_MAIN --m $M_VAL --n $N_DEF --k $K_DEF --trials $TRIALS --warmup $WARMUP \
    --a $A --b $B --c $C --d $D --l $L_DEF --skip-vec --skip-mult 2>> $LOGS | tee -a $RESULTS
done

# vary N.
for N_VAL in "${N[@]}"; do
  echo -e "m: $M_DEF\tn: $N_VAL\tk: $K_DEF" >> $RESULTS
  runtests_c --m $M_DEF --n $N_VAL --k $K_DEF --trials $TRIALS --a $A --b $B --c $C --d $D \
    --l $L_DEF --skip-vec true --skip-mult true
  java $JVM_OPTS -cp $MLLIB $MLLIB_MAIN --m $M_DEF --n $N_VAL --k $K_DEF --trials $TRIALS --warmup $WARMUP \
    --a $A --b $B --c $C --d $D --l $L_DEF --skip-vec --skip-mult 2>> $LOGS | tee -a $RESULTS
done

# vary K.
for K_VAL in "${K[@]}"; do
  echo -e "m: $M_DEF\tn: $N_DEF\tk: $K_VAL" >> $RESULTS
  runtests_c --m $M_DEF --n $N_DEF --k $K_VAL --trials $TRIALS --a $A --b $B --c $C --d $D \
    --l $L_DEF --skip-vec true --skip-simple true --skip-mult true
  java $JVM_OPTS -cp $MLLIB $MLLIB_MAIN --m $M_DEF --n $N_DEF --k $K_VAL --trials $TRIALS --warmup $WARMUP \
    --a $A --b $B --c $C --d $D --l $L_DEF --skip-vec --skip-simple --skip-mult 2>> $LOGS | tee -a $RESULTS
done

# Change mult order.
echo -e "a: $A\tb: $B\tc: $C\td: $D" >> $RESULTS
runtests_c --m $M_DEF --n $N_DEF --k $K_VAL --trials $TRIALS --a $A --b $B --c $C --d $D \
  --l $L_DEF --skip-vec true --skip-simple true --skip-gemm true
java $JVM_OPTS -cp $MLLIB $MLLIB_MAIN --m $M_DEF --n $N_DEF --k $K_VAL --trials $TRIALS --warmup $WARMUP \
  --a $A --b $B --c $C --d $D --l $L_DEF --skip-vec --skip-simple --skip-gemm 2>> $LOGS | tee -a $RESULTS

echo -e "a: $D\tb: $C\tc: $B\td: $A" >> $RESULTS
runtests_c --m $M_DEF --n $N_DEF --k $K_VAL --trials $TRIALS --a $D --b $C --c $B --d $A \
  --l $L_DEF --skip-vec true --skip-simple true --skip-gemm true
java $JVM_OPTS -cp $MLLIB $MLLIB_MAIN --m $M_DEF --n $N_DEF --k $K_VAL --trials $TRIALS --warmup $WARMUP \
  --a $D --b $C --c $B --d $A --l $L_DEF --skip-vec --skip-simple --skip-gemm 2>> $LOGS | tee -a $RESULTS
  
echo -e "a: $A\tb: $C\tc: $D\td: $B" >> $RESULTS
runtests_c --m $M_DEF --n $N_DEF --k $K_VAL --trials $TRIALS --a $A --b $C --c $D --d $B \
  --l $L_DEF --skip-vec true --skip-simple true --skip-gemm true
java $JVM_OPTS -cp $MLLIB $MLLIB_MAIN --m $M_DEF --n $N_DEF --k $K_VAL --trials $TRIALS --warmup $WARMUP \
  --a $A --b $C --c $D --d $B --l $L_DEF --skip-vec --skip-simple --skip-gemm 2>> $LOGS | tee -a $RESULTS
